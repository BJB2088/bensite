{
  "hash": "405b3711f75de7ebba85b6ad0483d0c9",
  "result": {
    "markdown": "---\n---\n\n\n## About Me\n\n\n::: {.cell}\n\n:::\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n<title>Interactive Sierpinski Triangle</title>\n</head>\n<body>\n\n<svg id=\"sierpinski\" width=\"600\" height=\"600\" style=\"border:1px solid black;\"></svg>\n\n<script>\nfunction drawTriangle(svg, x1, y1, x2, y2, x3, y3, depth) {\n    if(depth === 0) {\n      var triangle = document.createElementNS(\"http://www.w3.org/2000/svg\", 'polygon');\n      triangle.setAttribute(\"points\", `${x1},${y1} ${x2},${y2} ${x3},${y3}`);\n      triangle.setAttribute(\"stroke\", \"black\");\n      triangle.setAttribute(\"fill\", \"none\");\n      svg.appendChild(triangle);\n      return;\n    }\n\n    var xm1 = (x1 + x2) / 2;\n    var ym1 = (y1 + y2) / 2;\n    var xm2 = (x2 + x3) / 2;\n    var ym2 = (y2 + y3) / 2;\n    var xm3 = (x1 + x3) / 2;\n    var ym3 = (y1 + y3) / 2;\n\n    drawTriangle(svg, x1, y1, xm1, ym1, xm3, ym3, depth - 1);\n    drawTriangle(svg, x2, y2, xm1, ym1, xm2, ym2, depth - 1);\n    drawTriangle(svg, x3, y3, xm2, ym2, xm3, ym3, depth - 1);\n  }\n\n  var svg = document.getElementById('sierpinski');\n  drawTriangle(svg, 50, 550, 550, 550, 300, 50, 5);\n\n  var viewBox = { x: 0, y: 0, width: 600, height: 600 };\n\n  svg.addEventListener('wheel', function(e) {\n    e.preventDefault();\n    \n    var zoomFactor = 1.1;\n    var scale = e.deltaY < 0 ? zoomFactor : 1 / zoomFactor;\n    \n    // Get the position of the mouse within the SVG\n    var rect = svg.getBoundingClientRect();\n    var x = e.clientX - rect.left;\n    var y = e.clientY - rect.top;\n\n    // Convert mouse position from screen coordinates to viewBox coordinates\n    var svgPoint = svg.createSVGPoint();\n    svgPoint.x = x;\n    svgPoint.y = y;\n    var cursorPoint = svgPoint.matrixTransform(svg.getScreenCTM().inverse());\n    \n    // Update the viewBox values based on the zoom factor and cursor position\n    viewBox.width /= scale;\n    viewBox.height /= scale;\n    viewBox.x = cursorPoint.x - (cursorPoint.x - viewBox.x) / scale;\n    viewBox.y = cursorPoint.y - (cursorPoint.y - viewBox.y) / scale;\n    \n    svg.setAttribute(\"viewBox\", `${viewBox.x} ${viewBox.y} ${viewBox.width} ${viewBox.height}`);\n  });\n\n</script>\n\n</body>\n</html>\n\n  \n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}